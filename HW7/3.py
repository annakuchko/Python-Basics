# 3. Реализовать программу работы с органическими клетками. Необходимо создать
# класс Клетка. В его конструкторе инициализировать параметр, соответствующий
# количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), 
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные 
# методы должны применяться только к клеткам и выполнять увеличение, уменьшение, 
# умножение и обычное (не целочисленное) деление клеток, соответственно. В методе 
# деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно 
# равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если 
# разность количества ячеек двух клеток больше нуля, иначе выводить 
# соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки 
# определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется 
# как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр 
# класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки 
# по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество 
# ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда 
# не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. 
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. 
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

import math

class Cell:
    
    def __init__(self, n_cells):
        self.n_cells  = n_cells
    
    def __add__(self, other):
        return Cell(self.n_cells+other.n_cells)
    
    def __sub__(self, other):
        res = self.n_cells - other.n_cells
        if res < 0:
            raise Exception("Number of cells can't be negative")
        else:
            return(Cell(res))
        
    def __mul__(self, other):
        return Cell(self.n_cells * other.n_cells)
    
    def __truediv__(self, other):
        return Cell(math.floor(self.n_cells / other.n_cells))
    
    def make_order(self, n_row):
        n_cells = self.n_cells
        s = ''
        for i in range(n_cells // n_row ):
            s+=('*' * n_row) + '\n'
        s+='*' * (n_cells % n_row)    
        return str(s)
    

cell1 = Cell(5)
cell2 = Cell(10)

new_cell = cell1 + cell2
print(new_cell.n_cells)

# Raise error
# new_cell1 = cell1 - cell2

new_cell2 = cell2 - cell1
print(new_cell2.n_cells)

new_cell3 = cell1 * cell2
print(new_cell3.n_cells)

cell3 = Cell(18)
new_cell4 = cell3 / cell1
print(new_cell4.n_cells)

cell3 = Cell(15)
print(cell3.make_order(4))

